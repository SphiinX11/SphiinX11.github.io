<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>苍穹外卖学习笔记——新增员工需求</title>
    <link href="/2024/09/25/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96Day02%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/25/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96Day02%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-需求分析与接口设计"><a href="#1-需求分析与接口设计" class="headerlink" title="1.需求分析与接口设计"></a>1.需求分析与接口设计</h2><p>产品原型：</p><p><img src="https://s2.loli.net/2024/09/26/NJpuYyg6zkFVW8f.png" alt="需求分析"></p><p>接口设计：</p><p><img src="https://s2.loli.net/2024/09/26/RneTdbjJEGf5paw.png" alt="接口设计"></p><p>数据库设计：</p><p><img src="https://s2.loli.net/2024/09/26/FcMnPOGILyuN7m3.png" alt="数据库设计"></p><h2 id="2-代码开发"><a href="#2-代码开发" class="headerlink" title="2.代码开发"></a>2.代码开发</h2><p>1.当前端传过来的数据跟我们已有的pojo的参数属性差别较大时，可以使用专门的DTO用来接收前端传过来的数据（此处资料中已提供，无需自行创建）</p><p>2.编写添加员工的Controller方法：在EmployeeController中新建一个方法save，传入参数employeeDTO来接收数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><span class="hljs-comment">//post方式请求</span><br><span class="hljs-meta">@ApiOperation(&quot;新增员工&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123; <br>      log.info(<span class="hljs-string">&quot;新增员工：&#123;&#125;&quot;</span>,employeeDTO);<br>      employeeService.save(employeeDTO);<br>      <span class="hljs-keyword">return</span> Result.success();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1.前端使用post方式，所以加@PostMapping注解</p><p>2.前端传过来的数据类型是json，所以使用@RequestBody注解</p></blockquote><br/><p>3.编写Service接口和Impl类:创建一个emloyee实体类，然后把DTO的数据拷贝到实体类中，然后对剩下的属性进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(EmployeeDTO employeeDTO)</span>&#123;<br>    <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>    BeanUtils.copyProperties(employeeDTO,employee);<span class="hljs-comment">//对象属性拷贝</span><br>    employee.setStatus(StatusConstant.ENABLE);<br>    employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));<br>    employee.setCreateTime(LocalDateTime.now());<br>    employee.setUpdateTime(LocalDateTime.now());<br>    employee.setCreateUser(<span class="hljs-number">10L</span>); <span class="hljs-comment">//TODO 后续需要改为当前登录用户的id</span><br>    employee.setUpdateUser(<span class="hljs-number">10L</span>);<br>    employeeMapper.insert(employee);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1.可以用BeanUtils工具类中的copyProperties方法来对对象进行拷贝</p><p>3.使用StatusConstant常量类让代码更灵活优雅</p></blockquote> <br/><p>4.编写Mapper接口：直接使用注解编写SQL来将数据插入数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Insert(&quot;insert into employee(name,username,password,phone,sex,id_number,status,create_time,update_time,create_user,update_user)&quot;+</span><br><span class="hljs-meta">    &quot;values&quot;+</span><br><span class="hljs-meta">    &quot;(#(name),#(username),#(password),#(phone),#(sex),#(idNumber),#(status),#(createTime),#(updateTime),#(createUser),#(updateUser))&quot;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(Employee employee)</span>;<br></code></pre></td></tr></table></figure><h2 id="3-功能测试"><a href="#3-功能测试" class="headerlink" title="3. 功能测试"></a>3. 功能测试</h2><p>1.使用Swagger接口文档进行测试</p><p>2.因为有JWT，所以没有登录不能添加数据</p><p>3.先在接口文档中调用登录方法，获得一个令牌</p><p>4.然后点击全局参数设置-输入参数名称+参数值</p><p>5.带着参数值发送即可成功在数据库中添加数据</p><h2 id="4-代码完善"><a href="#4-代码完善" class="headerlink" title="4. 代码完善"></a>4. 代码完善</h2><h3 id="问题1：录入的用户名已存在时，抛出异常后没有处理"><a href="#问题1：录入的用户名已存在时，抛出异常后没有处理" class="headerlink" title="问题1：录入的用户名已存在时，抛出异常后没有处理"></a>问题1：录入的用户名已存在时，抛出异常后没有处理</h3><p>在全局的异常处理器sky-server&#x2F;handler&#x2F;GlobalExceptionHandler中，创建exceptionHandler方法，在方法里添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ExceptionHandler</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(SQLIntegrityConstraintViolationException ex)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> ex.getMessage();<br>        <span class="hljs-comment">//判断异常信息【控制台：后面的部分】是否包含Duplicate entry</span><br><span class="hljs-comment">//如果包含说明添加的数据已经存在</span><br><span class="hljs-comment">//错误信息的第三部分即为已存在的username</span><br><span class="hljs-comment">//故将错误信息拼接起来返回</span><br>        <span class="hljs-keyword">if</span>(message.contains(<span class="hljs-string">&quot;Duplicate entry&quot;</span>))&#123;<br>            String[] split = message.split(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> split[<span class="hljs-number">2</span>];<br>            <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> username + MessageConstant.ALREADY_EXISTS;<br>            <span class="hljs-keyword">return</span> Result.error(msg);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="问题2：创建人id没有正确处理"><a href="#问题2：创建人id没有正确处理" class="headerlink" title="问题2：创建人id没有正确处理"></a>问题2：创建人id没有正确处理</h3><blockquote><p>JWT认证机制：用户发起请求发送用户名和密码，后端进行校验，如果验证通过就生成JWT Token，将Token返回给客户端，客户端会保存Token，在后续请求的请求头中都会携带JWT Token，请求会被拦截器拦截到，会检查Token，如果通过就会展示数据，如果没有通过就会返回错误信息。</p><p><img src="https://s2.loli.net/2024/09/26/jYhmNraLtC4ow1l.png" alt="JWT认证机制"></p><p>ThreadLocal:它是Thread的局部变量，为每个线程提供单独一份的存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，在线程外则不能访问。</p></blockquote><p>由此可知，我们可以先在拦截器JwtTokenAdminInterceptor里将ID存到存储空间里（set），因为每次请求线程不变，所以存储空间的值不会被更改，因此可以在EmployeeServiceImpl类中取到该值（get），进而输出。</p><p><img src="https://s2.loli.net/2024/09/26/rDl4ostyJaLqweO.png" alt="image.png"></p><p><img src="https://s2.loli.net/2024/09/26/hY3HrwyjCtaE9cd.png" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>苍穹外卖</tag>
      
      <tag>java</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora的使用</title>
    <link href="/2024/09/02/Typora%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/09/02/Typora%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>不会用Typora所以用Typora写篇学习Typora的笔记（？）</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>一级标题：Ctrl+1 或# </p><p>二级标题：Ctrl+2 或##</p><p>三级标题：Ctrl+3 或###</p><p>四级标题：Ctrl+4 或####</p><p>五级标题：Ctrl+5 或#####</p><p>六级标题：Ctrl+6 或######</p><p>注意：#后面要加一个空格键</p><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p>删除线：alt+shift+5</p><p>加粗：ctrl+B</p><p>斜体：ctrl+I</p><p>下划线：ctrl+U</p><p>高亮：&#x3D;&#x3D; &#x3D;&#x3D;</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>“|”作竖线 “-”作横线</p><p>快捷键：ctrl + T</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>这是&gt;一级引用   这是&gt;&gt; 二级引用</p><p>快捷键：ctrl shift+q</p><p>注意：&gt;后面要加一个空格键 引用必须位于一行的开头</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>“-” + “空格键”</p><p>快捷键：ctrl+shift+]  </p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>“数字.” + “空格键”</p><p>快捷键：ctrl+shift+[ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="不确定语言"><a href="#不确定语言" class="headerlink" title="不确定语言"></a>不确定语言</h3><p>ctrl+shift+k</p><h3 id="确定语言"><a href="#确定语言" class="headerlink" title="确定语言"></a>确定语言</h3><p>`&#96;&#96; 语言名称</p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="内部跳转–文件内跳转"><a href="#内部跳转–文件内跳转" class="headerlink" title="内部跳转–文件内跳转"></a>内部跳转–文件内跳转</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[提示文字]</span>(#路径) 如：<span class="hljs-selector-attr">[跳转到引用]</span>(#/image)<br>快捷键：CTRL+K<br></code></pre></td></tr></table></figure><h3 id="外部跳转–超链接"><a href="#外部跳转–超链接" class="headerlink" title="外部跳转–超链接"></a>外部跳转–超链接</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[提示文字]</span>(网址) 如：<span class="hljs-selector-attr">[百度]</span>(baidu.com)<br> 快捷键：CTRL+K<br></code></pre></td></tr></table></figure><h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>使用<code>&lt;&gt;</code>包括URL或邮箱地址会被自动转换为超链接</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[提示文字]</span>(图片地址) <br></code></pre></td></tr></table></figure><p>相对路径和绝对路径均可</p><h2 id="表情😉"><a href="#表情😉" class="headerlink" title="表情😉"></a>表情😉</h2><p>快捷键：“windows” + “;”</p>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My First Blog</title>
    <link href="/2024/08/29/My-First-Blog/"/>
    <url>/2024/08/29/My-First-Blog/</url>
    
    <content type="html"><![CDATA[<h1 id="好好学习天天向上"><a href="#好好学习天天向上" class="headerlink" title="好好学习天天向上"></a>好好学习天天向上</h1><p>这个假期有了想要系统学习java后端开发的想法，奈何自己太懒，快开学了还没咋看（），遂搭建了这个博客，用于记录学习进度,希望可以坚持下去TT</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>后续发文可能会常用到图片和代码块，顺便在这里测试一下效果</p><p><img src="/images/test1.jpg" alt="图片" title="test"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[][] vec = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][m];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                vec[i][j] = scanner.nextInt();<br>                sum += vec[i][j];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 统计横向</span><br>        <span class="hljs-type">int</span>[] horizontal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>                horizontal[i] += vec[i][j];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 统计纵向</span><br>        <span class="hljs-type">int</span>[] vertical = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>                vertical[j] += vec[i][j];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">horizontalCut</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            horizontalCut += horizontal[i];<br>            result = Math.min(result, Math.abs(sum - <span class="hljs-number">2</span> * horizontalCut));<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">verticalCut</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>            verticalCut += vertical[j];<br>            result = Math.min(result, Math.abs(sum - <span class="hljs-number">2</span> * verticalCut));<br>        &#125;<br><br>        System.out.println(result);<br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂七杂八</category>
      
    </categories>
    
    
    <tags>
      
      <tag>宝宝辅食</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/29/hello-world/"/>
    <url>/2024/08/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
